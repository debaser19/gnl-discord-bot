name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: gnl-bot
  CONTAINER_NAME: gnl-bot
  IMAGE_NAME: gnl-bot
  IMAGE_TAG: latest

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR, delete untagged images
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # IMAGE_TAG: ${{ github.sha }} # used github sha as image tag
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        # Delete all untagged images
        aws ecr describe-repositories --output text | awk '{print $5}' | egrep -v '^$' | while read line; do  repo=$(echo $line | sed -e  "s/arn:aws:ecr.*\///g") ; aws ecr list-images --repository-name $repo --filter tagStatus=UNTAGGED --query 'imageIds[*]' --output text | while read imageId; do aws ecr batch-delete-image --repository-name $repo --image-ids imageDigest=$imageId; done; done

    - name: Deploy to AWS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSHKEY }}
        envs: IMAGE_NAME
        port: 22
        script: |
          # Login to registry
          sudo `aws ecr get-login --no-include-email`
          # Stop running container
          sudo docker stop $(echo $IMAGE_NAME)
          # Remove old container
          sudo docker rm $(echo $IMAGE_NAME)
          # Run a new container from a new image
          sudo docker run -d \
          --restart always \
          --name $(echo $IMAGE_NAME) \
          ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          sudo echo "DISCORD_TOKEN='${{ secrets.DISCORD_TOKEN }}'" > config.py
          sudo echo "W3C_URL='${{ secrets.W3C_URL }}'" >> config.py
          sudo echo '${{ secrets.SHEETS_KEY }}' > ${{ secrets.SHEETS_KEY_FILENAME }}
          sudo docker cp config.py ${{ env.CONTAINER_NAME }}:/data
          sudo docker cp ${{ secrets.SHEETS_KEY_FILENAME }} ${{ env.CONTAINER_NAME }}:/data
          sudo rm -f port* config.py 